# server configuration
server.httpsPort: 8402
server.serviceId: com.networknt.scheduler-1.0.0

# client.yml
client.verifyHostname: false
client.tokenKeyServerUrl: https://oauth-kafka:6881
client.tokenKeyUri: /oauth2/N2CMw0HGQXeLvC1wBfln2A/keys

# scheduler.yml
scheduler.inputTopic: light-scheduler

# service.yml
service.singletons:
  - com.networknt.registry.URL:
      - com.networknt.registry.URLImpl
  - com.networknt.portal.registry.client.PortalRegistryClient:
      - com.networknt.portal.registry.client.PortalRegistryClientImpl
  - com.networknt.registry.Registry:
      - com.networknt.portal.registry.PortalRegistry
  - com.networknt.balance.LoadBalance:
      - com.networknt.balance.RoundRobinLoadBalance
  - com.networknt.cluster.Cluster:
      - com.networknt.cluster.LightCluster
  - com.networknt.cache.CacheManager:
      - com.networknt.cache.CaffeineCacheManager
  # StartupHookProvider implementations, there are one to many and they are called in the same sequence defined.
  - com.networknt.server.StartupHookProvider:
      - com.networknt.scheduler.SchedulerStartupHook
  # ShutdownHookProvider implementations, there are one to many and they are called in the same sequence defined.
  - com.networknt.server.ShutdownHookProvider:
      - com.networknt.scheduler.SchedulerShutdownHook
  - com.networknt.kafka.producer.NativeLightProducer:
      - com.networknt.kafka.producer.SidecarProducer
  - io.confluent.kafka.schemaregistry.client.SchemaRegistryClient:
      - com.networknt.kafka.common.LightSchemaRegistryClient

# producer format configuration
kafka-producer.bootstrap.servers: localhost:29092
kafka-producer.schema.registry.url: http://localhost:8081
kafka-producer.keyFormat: avro
kafka-producer.valueFormat: avro

# streams configuration
kafka-streams.bootstrap.servers: localhost:29092
kafka-streams.schema.registry.url: http://localhost:8081
kafka-streams.application.id: light-scheduler
kafka-streams.cleanUp: false

# handler.yml
handler.handlers:
  # Light-framework cross-cutting concerns implemented in the microservice
  - com.networknt.exception.ExceptionHandler@exception
  - com.networknt.metrics.MetricsHandler@metrics
  - com.networknt.traceability.TraceabilityHandler@traceability
  - com.networknt.correlation.CorrelationHandler@correlation
  - com.networknt.openapi.OpenApiHandler@specification
  - com.networknt.openapi.JwtVerifyHandler@security
  - com.networknt.body.BodyHandler@body
  - com.networknt.audit.AuditHandler@audit
  # DumpHandler is to dump detail request/response info to log, useful for troubleshooting but not suggested to use in production due to it may lower the performance
  # - com.networknt.dump.DumpHandler@dump
  - com.networknt.sanitizer.SanitizerHandler@sanitizer
  - com.networknt.openapi.ValidatorHandler@validator
  # Customer business domain specific cross-cutting concerns handlers
  # - com.example.validator.CustomizedValidator@custvalidator
  # Framework endpoint handlers
  - com.networknt.health.HealthGetHandler@health
  - com.networknt.info.ServerInfoGetHandler@info
  - com.networknt.logging.handler.LoggerGetHandler@getLogger
  - com.networknt.logging.handler.LoggerPostHandler@postLogger
  - com.networknt.specification.SpecDisplayHandler@spec
  - com.networknt.specification.SpecSwaggerUIHandler@swaggerui
  # - com.networknt.metrics.prometheus.PrometheusGetHandler@getprometheus
  # Business Handlers
  - com.networknt.scheduler.handler.SchedulersPostHandler
  - com.networknt.scheduler.handler.SchedulersGetHandler

handler.chains.default:
  - exception
  # - metrics
  - traceability
  - correlation
  - specification
  - security
  - body
  - audit
  - sanitizer
  - validator

# cache.yml
cache.caches:
  - cacheName: jwt
    expiryInMinutes: 15
    maxSize: 100
  - cacheName: jwk
    expiryInMinutes: 129600
    maxSize: 100
