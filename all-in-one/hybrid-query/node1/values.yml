# server.yml
server.httpsPort: 8440
server.serviceId: com.networknt.portal.hybrid.query-1.0.0

# client.yml
client.verifyHostname: false
client.tokenAcClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.tokenCcClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.tokenKeyServerUrl: https://oauth-kafka:6881
client.tokenKeyUri: /oauth2/EF3wqhfWQti2DUVrvYNM7g/keys

# kafka-streams.yml
kafka-streams.bootstrap.servers: broker:29092
kafka-streams.schema.registry.url: http://schema-registry:8081
kafka-streams.application.id: hybrid-query
# kafka-streams.cleanUp: true

# portal.yml
portal.sendEmail: false
portal.cmdHost: https://hybrid-command:8439
portal.resetHost: https://devsignin.lightapi.net

# db-provider.yml
# For postgres database running in a docker container, you have to use the driverClassName.
db-provider.driverClassName: org.postgresql.Driver
db-provider.jdbcUrl: jdbc:postgresql://postgres:5432/configserver
db-provider.username: postgres
db-provider.password: secret
db-provider.maximumPoolSize: 3

# cache.yml
cache.caches:
  - cacheName: jwt
    expiryInMinutes: 15
    maxSize: 100
  - cacheName: jwk
    expiryInMinutes: 129600
    maxSize: 100
  - cacheName: portal-data
    expiryInMinutes: 60
    maxSize: 1000
  - cacheName: auth_code
    expiryInMinutes: 5
    maxSize: 1000

# direct-registry.yml
direct-registry.directUrls:
  com.networknt.portal.hybrid.query-1.0.0: https://hybrid-query1:8440,https://hybrid-query2:8441,https://hybrid-query3:8442
  com.networknt.portal.hybrid.command-1.0.0: https://hybrid-command:8439
  com.networknt.oauth-kafka-1.0.0: https://oauth-kafka:6881
  com.networknt.reference-1.0.0: https://reference:2498

# service.yml
service.singletons:
  - com.networknt.registry.URL:
    - com.networknt.registry.URLImpl
  - com.networknt.registry.Registry:
    - com.networknt.registry.support.DirectRegistry
  - com.networknt.balance.LoadBalance:
    - com.networknt.balance.RoundRobinLoadBalance
  - com.networknt.cluster.Cluster:
    - com.networknt.cluster.LightCluster
  - com.networknt.cache.CacheManager:
    - com.networknt.cache.CaffeineCacheManager
  # PortalDbProviderImpl of DbProvider
  - com.networknt.db.provider.DbProvider:
    - net.lightapi.portal.db.PortalDbProviderImpl
  # StartupHookProvider implementations, there are one to many and they are called in the same sequence defined.
  - com.networknt.server.StartupHookProvider:
    # registry all service handlers by from annotations
    - com.networknt.rpc.router.RpcStartupHookProvider
    # - com.networknt.jaeger.tracing.JaegerStartupHookProvider
    # User Query Startup Hook
    - net.lightapi.portal.user.query.UserQueryStartup
    # database startup hook to initialize datasource and cache.
    - com.networknt.db.provider.SqlDbStartupHook
  # ShutdownHookProvider implementations, there are one to many and they are called in the same sequence defined.
  - com.networknt.server.ShutdownHookProvider:
    # User Query Shutdown Hook
    - net.lightapi.portal.user.query.UserQueryShutdown
  # Schema Registry client implementation
  - io.confluent.kafka.schemaregistry.client.SchemaRegistryClient:
    - com.networknt.kafka.common.LightSchemaRegistryClient

# security.yml
security.enableVerifyJwt: true
