# server.yml
server.httpsPort: 8441

# client.yml
client.verifyHostname: false
client.tokenAcClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.tokenCcClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.tokenRtClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.tokenKeyClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.signClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.signKeyClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.derefClientId: f7d42348-c647-4efb-a52d-4c5787421e73
client.injectOpenTracing: true

# kafka-streams.yml
kafka-streams.bootstrap.servers: broker:29092
kafka-streams.schema.registry.url: http://schema-registry:8081
# kafka-streams.cleanUp: true

# portal.yml
portal.sendEmail: false
portal.cmdHost: https://hybrid-command:8439
portal.resetHost: https://devsignin.lightapi.net

# db-provider.yml
# For postgres database running in a docker container, you have to use the driverClassName.
db-provider.driverClassName: org.postgresql.Driver
db-provider.jdbcUrl: jdbc:postgresql://timescale:5432/configserver
db-provider.username: postgres
db-provider.password: secret
db-provider.maximumPoolSize: 3

# cache.yml
cache.caches:
  - cacheName: auth_code
    maxSize: 1000
    expiryInMinutes: 5
